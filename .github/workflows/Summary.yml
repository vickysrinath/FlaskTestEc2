name: CI/CD Pipeline Role
on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339712877925:role/CodeDeployRole
          aws-region: us-east-1

      # Step 2: Create CodeDeploy Deployment
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          echo "Creating CodeDeploy deployment..."
          DEPLOYMENT_ID=$(aws deploy create-deployment \
                          --application-name FlaskApp \
                          --deployment-group-name FlaskGroup \
                          --deployment-config-name CodeDeployDefault.OneAtATime \
                          --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
                          --query "deploymentId" --output text)
          echo "Deployment created with ID: ${DEPLOYMENT_ID}"
          echo "::set-output name=deploymentId::${DEPLOYMENT_ID}"

      # Step 3: Annotate Deployment Step
      - name: Annotate Deployment Step
        if: always()
        continue-on-error: true
        env:
          DEPLOYMENT_ID: ${{ steps.deploy.outputs.deploymentId }}
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.actions.createCheckRun({
              name: 'Create CodeDeploy Deployment',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Deployment Created Successfully',
                summary: 'Deployment ID: ' + process.env.DEPLOYMENT_ID,
              }
            });
